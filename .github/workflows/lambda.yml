# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      #installs a version of python, but I need this if deploying to a severless Python Lambda?
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.7'
          
      #credentials to connect to AWS
      - name: Configure AWS credentials from Production account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          #runtime: python3.7
          #profile_name: ${{ secrets.AWS_PROFILE }}
          #project_name: ${{ secrets.AWS_PROJECT }}
          #s3_bucket: ${{ secrets.AWS_BUCKET }}
    
      # Runs a set of commands using the runners shell; THIS DOESN'T WORK
      - name: Run a multi-line script
        run: |
          #install PIP
          python -m pip install --upgrade pip
          #install all dependencies as defined by requirements.txt in the current directory
          pip3 install -r requirements.txt -t .
          #for installing invidividual modules
          #pip3 install Flask -t .
          #zip files into current directory
          zip -r invalidate-cloudFront-cache.zip .
         
          #for installing chrome
          wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
          sudo dpkg -i google-chrome-stable_current_amd64.deb
         
          #ensuring current working directory is accessible by the function--this might not be doing anything
          export PATH=$PATH:$(pwd)
    
      #Deploy lambda_function.py to AWS
      - name: AWS Lambda Deploy
        uses: appleboy/lambda-action@v0.0.8
        with:
              aws_region: ${{ secrets.AWS_REGION }}
              #name of my AWS Lambda Function
              function_name: ${{ secrets.AWS_FUNCTION }}
              #contains all the files in my github repository
              zip_file: ${{ secrets.AWS_FUNCTION }}.zip
              
      
